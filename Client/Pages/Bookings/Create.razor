@page "/bookings/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Booking</h3>
<hr />
<br />

@*<FormComponent ButtonText="Create Booking" booking="booking" OnValidSubmit="@CreateBooking" />*@

<EditForm Model="@booking" OnValidSubmit="CreateBooking">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label>Customer: </label>
		<div>
			<InputSelect @bind-Value="booking.CustomerId" class="form-control">
				<option value="">-- Select Customer --</option>
				@if (Customers != null)
				{
					foreach (var customer in Customers)
					{
						<option value="@customer.Id">@customer.CusFirstName @customer.CusLastName</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => booking.CustomerId)" />
		</div>
	</div>

	<div class="form-group">
		<label>Date In: </label>
		<div>
			<InputDate @bind-Value="booking.DateIn" class="form-control">
			</InputDate>
			<ValidationMessage For="@(() => booking.DateIn)" />
		</div>
	</div>

	@if (booking.Id > 0)
	{
		<div class="form-group">
			<label>Date Out: </label>
			<div>
				<InputDate @bind-Value="@booking.DateOut" class="form-control" />
				<ValidationMessage For="@(() => booking.DateOut)" />
			</div>
		</div>
	}

	<br />
	<button type="submit" class="btn btn-success btn-block">
		Create Booking
	</button>
</EditForm>

@code {
	Booking booking = new Booking();

	private async Task CreateBooking()
	{
		await _client.PostAsJsonAsync(Endpoints.BookingsEndpoint, booking);
		_navManager.NavigateTo("/bookings/");
	}

	private IList<Customer>? Customers;
	
	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}
}