@page "/bookings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Bookings Info</h3>
<br />

<a href="/bookings/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Booking
</a>
<br />
<br />
@if (Bookings == null){
	<div class="alert alert-info">Loading Bookings...</div>
}
else
{
	<table class="table table-responsive" id="bookingsTable">
		<thead>
			<tr>
				<th>Trip Name</th>
				<th>Customer Name</th>
				<th>Location</th>
				<th>Email</th>
				<th>Start Date</th>
				<th>End Date</th>
				<th>Number of Guests</th>
				<th>Actions</th>
			</tr>
		</thead>

	<tbody>
		@foreach (var booking in Bookings)
		{
			<tr>
				<td>@booking.TravelDocs.TravelName</td>
				<td>@booking.Customer.CusFirstName @booking.Customer.CusLastName</td>
				<td>@booking.BookingLocation</td>
				<td>@booking.BookingEmail</td>
				<td>
					@(booking.DateIn.HasValue ? booking.DateIn.Value.ToString("dd MMMM yyyy") : "--/--/----")
				</td>
				<td>
					@(booking.DateOut.HasValue ? booking.DateOut.Value.ToString("dd MMMM yyyy") : "--/--/----")
				</td>
				<td>@booking.GuestNumber</td>
				<td>
					<a href="/Bookings/view/@booking.Id" class="btn btn-primary">
						<span class= "oi oi-book"></span>	
					</a>
					<a href= "/Bookings/edit/@booking.Id" class= "btn btn-warning">
						<span class= "oi oi-pencil"> </span>	
					</a>
					<button class = "btn btn-danger" @onclick="@(()=>Delete(booking.Id))">
						<span class= "oi oi-delete"> </span>
					</button>
				</td>
			</tr>
		}
	</tbody>
	</table>

	<BackToList Target="viewTravelDesCus" />
	<tab />
	<a href="/" class="btn btn-yv btn-block">
		Return to Home
	</a>
	
}

@code {
	private List<Booking>? Bookings;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Bookings = await _client.GetFromJsonAsync<List<Booking>>($"{Endpoints.BookingsEndpoint}");
	}

	async Task Delete(int bookingsId)
	{
		if (Bookings != null)
		{
			var bookings = Bookings.First(q => q.Id == bookingsId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {bookings.Id}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.BookingsEndpoint}/{bookingsId}");
				await OnInitializedAsync();
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#bookingsTable");
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
		js.InvokeVoidAsync("DataTablesDispose", "#bookingsTable");
	}

}