@page "/destination/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

@inject HttpInterceptorService _interceptor
@implements IDisposable

<h3 class="card-title">Destination</h3>
<br />

<a href="/destination/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Destination
</a>
<br />
<br />

@if (Destination == null){
	<div class="alert alert-info">Loading Destinations...</div>
}
else
{
	<table class="table table-responsive" id="destinationTable">
		<thead>
			<tr>
				<th>Name</th>
				<th>Actions</th>
			</tr>
		</thead>
	<tbody>
		@foreach (var destination in Destination)
		{
			<tr>
				<td>@destination.DesName</td>
				<td>
					<a href="/destination/view/@destination.Id" class="btn btn-primary">
						<span class= "oi oi-book"></span>	
					</a>
					<a href="/destination/edit/@destination.Id" class="btn btn-warning">
						<span class= "oi oi-pencil"> </span>	
					</a>
					<button class="btn btn-danger" @onclick="@(()=>Delete(destination.Id))">
						<span class= "oi oi-delete"> </span>
					</button>
				</td>
			</tr>
		}
	</tbody>
	</table>

}

@code {
	private List<Destination>? Destination;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Destination = await _client.GetFromJsonAsync<List<Destination>>($"{Endpoints.DestinationEndpoint}");
	}

	async Task Delete(int destinationId)
	{
		if (Destination != null)
		{
			var destination = Destination.First(q => q.Id == destinationId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {destination.DesName}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.DestinationEndpoint}/{destinationId}");
				await OnInitializedAsync();
			}
		}
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#destinationTable");
	}

	public void Dispose()
	{
		_interceptor.DisposeEvent();
		js.InvokeVoidAsync("DataTablesDispose", "#destinationTable");
	}

}